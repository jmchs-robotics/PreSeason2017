// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5933.PreSeason2017;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5933.PreSeason2017.SocketVision;
import org.usfirst.frc5933.PreSeason2017.commands.*;
import org.usfirst.frc5933.PreSeason2017.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	Command autonomousCommand;

	public static boolean isDisabled;
	public static final boolean show_debug_vision = true;

	public static SocketVision frontWatcher;
	public static OI oi;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static Pneumatics pneumatics;
	public static Drivetrain drivetrain;
	public static RoboRio roboRio;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		RobotMap.init();
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		pneumatics = new Pneumatics();
		drivetrain = new Drivetrain();
		roboRio = new RoboRio();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		//(which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// instantiate the command used for the autonomous period
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		autonomousCommand = new DefaultAutonomousCommand();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
		visionInit();
	}

	/**
	 * This function is called when the disabled button is hit.
	 * You can use it to reset subsystems before shutting down.
	 */
	public void disabledInit(){	
		isDisabled = true; //keep up the self-awareness
		if (frontWatcher != null) { //kill the multithreaded UDP socket
			try {
				frontWatcher.stoprunning();
				frontWatcher.join();
				frontWatcher = null;
				
				if(show_debug_vision) SmartDashboard.putString("Vision Status: ", "Dead");
				
			} catch (Exception e) { //general catch because there could be more than one thrown exception
				e.printStackTrace(); 
			}
		}

		if(!roboRio.isGyroCalibrated) roboRio.calibrateGyo(); //calibrate the gyro in ~5sec on first startup (or software reboot) only
	}

	/**
	 * This is run periodically while the robot is disabled, after disabledInit.
	 */
	public void disabledPeriodic() {
		Scheduler.getInstance().run();

		drivetrain.sensorPeriodic();
		pneumatics.sensorPeriodic();
		roboRio.sensorPeriodic();
		
	}

	/**
	 * This is called once when the autonomous button is hit, or the FMS starts autonomous.
	 */
	public void autonomousInit() {
		isDisabled = false;
		drivetrain.setBrakeMode(true);
		visionInit();
		// schedule the autonomous command (example)    	
		if (autonomousCommand != null) autonomousCommand.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();

		drivetrain.sensorPeriodic();
		pneumatics.sensorPeriodic();
		roboRio.sensorPeriodic();
		
		visionFeedback();
	}

	/**
	 * This is called once when the teleop button is hit, or the FMS starts teleop.
	 */
	public void teleopInit() {
		isDisabled = false;
		visionInit();
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null) autonomousCommand.cancel();

		drivetrain.setBrakeMode(false);
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
		LiveWindow.run();

		drivetrain.sensorPeriodic();
		pneumatics.sensorPeriodic();
		roboRio.sensorPeriodic();
		
		visionFeedback();
	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
	}

	/**
	 * This instantiates the vision processing object and separate thread, which has to be closed
	 * down in disabled due to FMS restrictions. Should be called only once in autonomous and teleop init.
	 */
	private void visionInit() {
		if (frontWatcher == null) {
			frontWatcher = new SocketVision("10.59.33.255", 5801);
			if (show_debug_vision) {
				SmartDashboard.putString("Vision Status: ","Vision to Flag started.");
			}
			frontWatcher.start();

			if (!frontWatcher.is_connected()) {
				if (!frontWatcher.connect()) {
					if (show_debug_vision) {
						SmartDashboard.putString("Vision Status: ","Failed to connect to the Helmsman and I really need my boiled mayonnaise");
					}
				} else {
					if (show_debug_vision) {
						SmartDashboard.putString("Vision Status: ","Connected. Love me some boiled mayo.");
					}
				}
			}
		}
	}

	private void visionFeedback() {
		if(show_debug_vision) {
			SmartDashboard.putString("Vision Direction: ", frontWatcher.get_direction());
			SmartDashboard.putNumber("Vision Y: ", frontWatcher.get_degrees_y());
			SmartDashboard.putNumber("Vision X: ", frontWatcher.get_degrees_x());
			SmartDashboard.putNumber("Vision Dist (Width): ", frontWatcher.get_distance_width());
			SmartDashboard.putNumber("Vision Degrees (Width): ", frontWatcher.get_width());
			SmartDashboard.putBoolean("Vision Connected: ", frontWatcher.is_connected());
		}
	}
}
