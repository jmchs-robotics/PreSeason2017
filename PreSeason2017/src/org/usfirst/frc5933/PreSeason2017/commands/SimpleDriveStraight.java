// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5933.PreSeason2017.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5933.PreSeason2017.Robot;

/**
 *
 */
public class SimpleDriveStraight extends Command {

	double seconds;
	double vbus;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	/**
	 * A simple drive based on time only, with no corrective gyro. Defaults to 5 seconds at 0.5 vbus.
	 * Parameters for the other constructor are: percentVBus, delay
	 */
	public SimpleDriveStraight() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.drivetrain);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		seconds = 5;
		vbus = 0.5;
	}

	/**
	 * A simple robot drive straight with no corrective action from gryo or vision.
	 * @param percentVBus
	 * - the voltage percent to drive the bots at (from -1 to 1)
	 * @param delay
	 * - the number, in seconds, to drive the robot for.
	 */
	public SimpleDriveStraight(double percentVBus, double delay) {
		requires(Robot.drivetrain);
		seconds = delay;
		vbus = percentVBus;
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		setTimeout(seconds);

		Robot.drivetrain.tankDrive(vbus, vbus);
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		Robot.drivetrain.tankDrive(vbus, vbus);
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return isTimedOut();
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.drivetrain.stopAll();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
