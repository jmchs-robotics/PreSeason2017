// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5933.PreSeason2017.subsystems;

import org.usfirst.frc5933.PreSeason2017.Robot;
import org.usfirst.frc5933.PreSeason2017.RobotMap;
import org.usfirst.frc5933.PreSeason2017.commands.*;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.PowerDistributionPanel;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class RoboRio extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogGyro mainGyro = RobotMap.roboRioMainGyro;
    private final PowerDistributionPanel powerDistributionPanel = RobotMap.roboRioPowerDistributionPanel;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * Nominal battery voltage is 12.5
     */
    public static final double kNomialBatteryVoltage = 12.5;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void resetGyro() {
    	mainGyro.reset();
    }
    
    public double readGyro() {
    	return mainGyro.getAngle();
    }
    
    public double getBatteryVoltage() {
    	return powerDistributionPanel.getVoltage();
    }
    
    /**
     * This method returns a number (usually less than 1) that is the proportion between
     * the current battery voltage (from the PDP) and the {@link kNominalBatteryVoltage}
     * @return
     * the proportion given by getBatteryVoltage()/kNominalBatteryVoltage
     */
    public double getVBusProportion() {
    	return getBatteryVoltage() / kNomialBatteryVoltage;
    }
}

